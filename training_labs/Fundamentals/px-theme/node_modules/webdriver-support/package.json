{
  "name": "webdriver-support",
  "description": "Testing dependencies for webdriverjs + mocha + chai",
  "repository": {
    "type": "git",
    "url": "https://github.sw.ge.com/DT/webdriver-support.git"
  },
  "version": "2.2.0",
  "main": "./src/js/webdriver-factory/index",
  "dependencies": {
    "portfinder": "~0.4.0",
    "phantomjs": "~1.9.16",
    "merge": "~1.2.0",
    "mocha": "~2.2.1",
    "selenium-webdriver": "2.44.0",
    "chromedriver": "~2.14.1",
    "q": "~2.0.2"
  },
  "peerDependencies": {
    "chai": "2.x",
    "chai-as-promised": "~4.3.0"
  },
  "devDependencies": {
    "grunt": ">=0.4.1"
  },
  "scripts": {
    "install": "node verifyGlobalPackages.js"
  },
  "readme": "Webdriver Support\n=================\n\nSupport for running automated __functional__ tests with WebdriverJs + Mocha + Chai.\n\n## Contains\n\n* Binaries needed for testing (e.g. Mocha, selenium-server-standalone.jar)\n* Default config for webdriverjs+Mocha+Chai\n* A grunt task for configuration of runs using this package\n\n`peerDependencies` for use in tests include:\n* chai: http://chaijs.com/\n* chai-as-promised: http://chaijs.com/plugins/chai-as-promised\n\n## Of note\n\n* UI / functional tests are Mocha + Chai + WebdriverJs.  Mocha defines and runs tests, Chai is an assertion library, and WebdriverJs drives the simulated user interaction.\n    * Webdriver tests applications / test fixtures __remotely__ from the __point of view of the user__, not the code.  It simulates the user, and uses a plain vanilla \"application under test\", the application or page that you can pull up with any http server and inspect.  http-server is a npm dependency in package.json so you can run http-server at any time and access your ui test fixture(s) the exact same way webdriver does.\n    * Upon the start of a test Webdriver-support does the following:\n        * Starts webdriver server\n        * Starts `PhantomJsDriver` or `ChromeDriver` or `FirefoxDriver` per the test configuration\n        * Starts a nodeJs http server to run the \"application under test\" / test fixture\n        * Let's Mocha do the testing, Mocha will tell Webdriver to do things in the \"application under test\"\n    * Webdriver is asynchronous and almost every command returns a promise object. The tests need to deal with promises / asynchronous execution.  There are two options to do this...see `/examples` for examples of each.\n        * Use chai-as-promised to assert across promises (preferred), and/or,\n        * Put assertions inside `then` statements (standard promise stuff) and Mocha's `done` functionality to tell Mocha when a promise is resolved.\n    * Upon failure of a test, WebdriverJs takes a DOM dump and a screenshot and logs those + a stacktrace in a TAP-compatible (Test Anything Protocol) format for use with Mocha's TAP reporter.\n* Default to use phantomjs but chrome and firefox are available, too\n* Looking for unit testing (testing from the point of view of the __code__ rather than from the point of view of the __user__? Unit tests using Mocha + Chai + Sinon + Karma are supported by the https://github.sw.ge.com/DT/karma-support library\n\n## Rationale\n\n### General\n\nThere are two types of testing in the presentation layer: Unit, Functional/UI (including \"visual assertion\", e.g. verification of actual rendering by comparing DOM or screenshots).  For all three, there's a lot of configuration to accomplish before a developer can get up and running with tests.\n\nThis project abstracts the test boilerplate of functional/ui testing so the project itself can include just the tests.  \"Visual assertion\" within tests supported by this package can be done using https://github.sw.ge.com/DT/vissert . Unit testing is supported separately in https://github.sw.ge.com/DT/karma-support\n\nFor all types of tests, we need:\n\n* Speed, can be divided into suites (smoke test vs. full regression test).  Unit tests, in particular, must be very fast\n* Multi-browser, incl. headless (PhantomJS)\n* Clear failures with stack traces\n* Tooling for breakpoints in IDE (or other)\n* Enable independent run of failures\n* Enable CI trending of failures over time.\n* BDD vocabulary option\n* Tie into other tools, e.g. Istanbul (code coverage), Protractor (AngularJs-optimized wrapper around WebdriverJs).\n\n### Functional / UI testing\n\nIn functional/UI testing, the main additional requirements are:\n\n * Uses \"plain\" HTML Fixtures (can load up same HTML used for the test outside the test framework to debug) -- enables work to be spun up on any HTTP server for review by design, product management and other stakeholders remotely and with a minimum of tooling\n * Useful debug information upon failure, e.g. Screenshots / DOM dumps / stack traces -- enables debugging on remote environments such as CI which might have unique failures not seen locally.\n * Capability to decouple DOM targeting from tests so tests are less brittle (see http://martinfowler.com/bliki/PageObject.html)\n\n### Unit testing\n\nUnit tests using Mocha + Chai + Sinon + Karma are supported by the https://github.sw.ge.com/DT/karma-support library\n\n## Usage\n\n1. Include this package as a NPM dependency in your project's package.json: `\"webdriver-support\": \"git+https://github.sw.ge.com/DT/webdriver-support.git#[version tag]\"`\n2. Run NPM install\n3. Scaffold out your project's tests in `test/ui` of your project using the sample files in /examples (note: A few Yeoman Generators will do this for you: `generator-dx-component` for GE Design System Components, and `generator-card` for Predix Reader Cards)\n4. Add the relevant Grunt tasks and config to your project's Gruntfile.js (see note above about Yeoman Generators)\n5. Run 'grunt webdriver'\n\n## Writing Tests\n\nSee the documentation of Mocha (http://visionmedia.github.io/mocha/ with links to Sinon and Chai) and WebdriverJs (https://code.google.com/p/selenium/wiki/WebDriverJs)\n\n## CI Integration\n\nMocha controls the report output of tests via its reporters.  The TAP (\"Test Anything Protocol\") reporter is useful, and this package will format a DOM Dump, Stack Trace and Screenshot for TAP upon failure by default when the TAP reporter is used.\n\n## Future plans\n\n* Demonstrate (enforce?) usage of the PageObject pattern for WebdriverJs\n\n## Windows Notes\n\n* Even if Java is available via command line, it still needs to be in the system path/environmental variable\n* http-server install may fail, I think it needs to be installed both globally (npm install -g http-server) as well as inside the node_modules for webdriver-support (PLEASE VERIFY!)\n* Observed that on some machines, the PhantomJS exe is added to node_modules, but others not. Windows depends on the exe existing at \"node_modules/webdriver-support/node_modules/phantomjs/lib/phantom/phantomjs.exe\". If the exe is not there, please download from the official project and add it.",
  "readmeFilename": "README.md",
  "_id": "webdriver-support@2.2.0",
  "_shasum": "187c6ba9ddc9d898fcb9c2f36d526b7d27b2b6e7",
  "_resolved": "git://github.build.ge.com/DT/webdriver-support.git#e3bbcb56b5fc373a9fac78c49bf7d5a9fcce69d6",
  "_from": "webdriver-support@git://github.build.ge.com/DT/webdriver-support.git#v2.2.0"
}
